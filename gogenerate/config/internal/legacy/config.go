// Copyright 2016 Palantir Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package legacy

import (
	"github.com/palantir/godel/pkg/versionedconfig"
	"github.com/palantir/pkg/matcher"
	"github.com/pkg/errors"
	"gopkg.in/yaml.v2"
)

type GoGenerateWithLegacy struct {
	versionedconfig.ConfigWithLegacy `yaml:",inline"`
	GoGenerate                       `yaml:",inline"`
}

type GoGenerate struct {
	// Generators is a map from the name of a generator to its configuration.
	Generators Generators `yaml:"generators"`
}

type Generators map[string]GeneratorConfig

type GeneratorConfig struct {
	// GoGenDir is the relative path to the directory in which "go generate" should be run.
	GoGenDir string `yaml:"go-generate-dir"`
	// GenPaths is the configuration that specifies the criteria for matching the output files and directories
	// generated by the "go generate" command. Any file or directory that is matched by the matchers are used to
	// determine whether or not the "go generate" command caused any changes.
	GenPaths matcher.NamesPathsCfg `yaml:"gen-paths"`
	// Environment specifies values for the environment variables that should be set for the generator. For example, the
	// following would set GOOS to "darwin" and GOARCH to "amd64":
	//
	//   environment:
	//     GOOS: darwin
	//     GOARCH: amd64
	Environment map[string]string `yaml:"environment"`
}

func UpgradeConfig(cfgBytes []byte) ([]byte, error) {
	var legacyCfg GoGenerateWithLegacy
	if err := yaml.UnmarshalStrict(cfgBytes, &legacyCfg); err != nil {
		return nil, errors.Wrapf(err, "failed to unmarshal generate-plugin legacy configuration")
	}
	// optimization: if input bytes start with the legacy configuration key, trim it to get a valid v0 configuration
	if trimmed, ok := versionedconfig.TrimLegacyPrefix(cfgBytes); ok {
		return trimmed, nil
	}
	// otherwise, marshal just the GoGenerate portion of the configuration, which is fully compatible with v0
	upgradedBytes, err := yaml.Marshal(legacyCfg.GoGenerate)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to marshal generate-plugin legacy configuration")
	}
	return upgradedBytes, nil
}
