// Copyright 2016 Palantir Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gogenerate

import (
	"sort"

	"github.com/palantir/pkg/matcher"
)

type ProjectParam struct {
	Generators Generators
}

type Generators map[string]GeneratorParam

func (g Generators) SortedKeys() []string {
	var sorted []string
	for k := range g {
		sorted = append(sorted, k)
	}
	sort.Strings(sorted)
	return sorted
}

type ProjectConfig struct {
	// Generators is a map from the name of a generator to its configuration.
	Generators map[string]GeneratorConfig `yaml:"generators"`
}

func (c *ProjectConfig) ToParam() ProjectParam {
	generators := make(Generators)
	for k, v := range c.Generators {
		generators[k] = v.ToParam()
	}
	return ProjectParam{
		Generators: generators,
	}
}

type GeneratorParam struct {
	GoGenDir    string
	GenPaths    matcher.Matcher
	Environment map[string]string
}

type GeneratorConfig struct {
	// GoGenDir is the relative path to the directory in which "go generate" should be run.
	GoGenDir string `yaml:"go-generate-dir"`
	// GenPaths is the configuration that specifies the criteria for matching the output files and directories
	// generated by the "go generate" command. Any file or directory that is matched by the matchers are used to
	// determine whether or not the "go generate" command caused any changes.
	GenPaths matcher.NamesPathsCfg `yaml:"gen-paths"`
	// Environment specifies values for the environment variables that should be set for the generator. For example, the
	// following would set GOOS to "darwin" and GOARCH to "amd64":
	//
	//   environment:
	//     GOOS: darwin
	//     GOARCH: amd64
	Environment map[string]string `yaml:"environment"`
}

func (c *GeneratorConfig) ToParam() GeneratorParam {
	return GeneratorParam{
		GoGenDir:    c.GoGenDir,
		GenPaths:    c.GenPaths.Matcher(),
		Environment: c.Environment,
	}
}
